DAY 1 에피소드 1 ~ 에피소드 5
01 개발자에 대한 오해 5가지!
    - 가장 와 닫는 것 : 개발에서는 재능이이 아닌 포기하지 않는 것이 더 중요하다는 것 (중요한 건 꺾이지 않는 마음)
    - 읽으면서 느낀 것 : 나는 개발자로 진로를 희망하는가? 단순한 취미인지, 알아두면 편리한 점이 많아서인지 아직 고민중.
02 어떤 언어부터 공부해야 할까?
    - 나의 공부 순서 : C -> Java -> Python -> JavaScript | Java는 많이 안써봤고 나머진 좀 써봄. 하지만 아직 자료구조와 알고리즘 공부가 덜 되서 자유자재로 다루진 못함.
    - 내가 하고 싶은 건 무엇인가 : 아직 정하질 못함. 흥미가 가는 것 위주로 계속 공부하는 듯. 군대 국방망에서는 웹개발이 그나마 용이하고 재밌어서 JavaScript 하는 중
03 새 언어를 쉽게 배우는 노하우?
    - 공부 순서 : 가장 먼저 문법을 확인하며 비교했는데 공식 문서를 살펴보지는 않음. 그런데 공식 문서가 정확히 뭘 의미하는지 모르겠음. 걍 위키백과 같은 곳에서 역사나 사용의도 파악으로 이해함.
04 언어 이름은 왜 그렇게 지었을까?
    - 기존에 대충 알았던 거임. Ruby, Rust, Go는 몰랐음.
05 C, C++, C#은 이름처럼 비슷할까?
    - 차이점을 명확하게 인지할 수 있었음.
    - C++에서 C가 그대로 돌아가는 이유를 알게 되었고, C# 이 마이크로소프트와 밀접한 관계가 있다는 것을 인지함. 다만 닷넷이라는 개념에 대한 인지가 부족. .NET으로 끝나는 프로그램으로 인지 정확히 어떤 역할을 하는지는 잘 모르겠음.

모르는 점 3, 5

DAY 2 에피소드 6 ~ 에피소드 10

06 왜 나만 오류가 자주 생길까?
    - 오류메세지가 여러줄이 출력될 때 가장 위에 있는 것이 문제라는 건 앎. 근데 아래줄에 것들은 왜 뜨는지 모르겠음.
07 파이썬은 왜 이렇게 인기가 많을까?
    - 쉽고 다용도라.
08 파이썬이 C 언어보다 느린 이유는?
    - 인터프린터와 컴파일러의 차이. 물건을 하나씩 옮기는 것보다 박스채로 옮기면 혹은 트럭으로 옮기면 차이가 점점 심해지는 것처럼 이해함
09 자바스크립트는 웹 개발에만 쓰는 언어일까?
    - NodeJS로 웹 개발 이외에도 쓸 수 있는 건 인지하고 있었음. 그런데 socket.io, tensorflow.js 이런 것들은 라이브러리인데 nodeJS는 정확히 먼지는 모르겠음. 그냥 로컬에서 사용할 수 있게 만든 JavaScript 정도로 인지함.
10 코틀린은 정말로 자바와 100% 호환될까?
    - 컴필레이션 컴파일러, 인터프리테이션와 인터프린터의 차이가 무엇인지 모르겠음.
    - 자바와 코틀린이 호환되는 이유 : 자바가 바로 기계어로 번역되기 전에 자바 바이트 코드로 컴파일됨. 코틀린도 그런식으로 만들어서
모르는 점 6, 9, 10

DAY 3 에피소드 11 ~ 에피소드 15
11 라이브러리와 프레임워크, 비슷한 거 아냐?
12 제이쿼리는 반드시 배워야 하는 기술일까?
13 그놈의 API, 대체 뭐길래?
14 도메인은 왜 돈을 주고 사야 할까?
15 플래시의 서비스 종료와 스티브 잡스