DAY 1 에피소드 1 ~ 에피소드 5
01 개발자에 대한 오해 5가지!
    - 가장 와 닫는 것 : 개발에서는 재능이이 아닌 포기하지 않는 것이 더 중요하다는 것 (중요한 건 꺾이지 않는 마음)
    - 읽으면서 느낀 것 : 나는 개발자로 진로를 희망하는가? 단순한 취미인지, 알아두면 편리한 점이 많아서인지 아직 고민중.
02 어떤 언어부터 공부해야 할까?
    - 나의 공부 순서 : C -> Java -> Python -> JavaScript | Java는 많이 안써봤고 나머진 좀 써봄. 하지만 아직 자료구조와 알고리즘 공부가 덜 되서 자유자재로 다루진 못함.
    - 내가 하고 싶은 건 무엇인가 : 아직 정하질 못함. 흥미가 가는 것 위주로 계속 공부하는 듯. 군대 국방망에서는 웹개발이 그나마 용이하고 재밌어서 JavaScript 하는 중
03 새 언어를 쉽게 배우는 노하우?
    - 공부 순서 : 가장 먼저 문법을 확인하며 비교했는데 공식 문서를 살펴보지는 않음. 그런데 공식 문서가 정확히 뭘 의미하는지 모르겠음. 걍 위키백과 같은 곳에서 역사나 사용의도 파악으로 이해함.
04 언어 이름은 왜 그렇게 지었을까?
    - 기존에 대충 알았던 거임. Ruby, Rust, Go는 몰랐음.
05 C, C++, C#은 이름처럼 비슷할까?
    - 차이점을 명확하게 인지할 수 있었음.
    - C++에서 C가 그대로 돌아가는 이유를 알게 되었고, C# 이 마이크로소프트와 밀접한 관계가 있다는 것을 인지함. 다만 닷넷이라는 개념에 대한 인지가 부족. .NET으로 끝나는 프로그램으로 인지 정확히 어떤 역할을 하는지는 잘 모르겠음.

모르는 점 3, 5

DAY 2 에피소드 6 ~ 에피소드 10

06 왜 나만 오류가 자주 생길까?
    - 오류메세지가 여러줄이 출력될 때 가장 위에 있는 것이 문제라는 건 앎. 근데 아래줄에 것들은 왜 뜨는지 모르겠음.
07 파이썬은 왜 이렇게 인기가 많을까?
    - 쉽고 다용도라.
08 파이썬이 C 언어보다 느린 이유는?
    - 인터프린터와 컴파일러의 차이. 물건을 하나씩 옮기는 것보다 박스채로 옮기면 혹은 트럭으로 옮기면 차이가 점점 심해지는 것처럼 이해함
09 자바스크립트는 웹 개발에만 쓰는 언어일까?
    - NodeJS로 웹 개발 이외에도 쓸 수 있는 건 인지하고 있었음. 그런데 socket.io, tensorflow.js 이런 것들은 라이브러리인데 nodeJS는 정확히 먼지는 모르겠음. 그냥 로컬에서 사용할 수 있게 만든 JavaScript 정도로 인지함.
10 코틀린은 정말로 자바와 100% 호환될까?
    - 컴필레이션 컴파일러, 인터프리테이션와 인터프린터의 차이가 무엇인지 모르겠음.
    - 자바와 코틀린이 호환되는 이유 : 자바가 바로 기계어로 번역되기 전에 자바 바이트 코드로 컴파일됨. 코틀린도 그런식으로 만들어서
모르는 점 6, 9, 10

DAY 4 에피소드 11 ~ 에피소드 15
11 라이브러리와 프레임워크, 비슷한 거 아냐?
    - 라이브러리 : 내가 제어하는 것
    - 프레임워크 : 내가 제어당하는 것
    - 내가 생각하는 차이점은 코드에서 내가 호출할 수 있는가? 
      파이썬 라이브러리와 프레임워크의 차이점을 생각할 떄 라이브러리는 pip install를 한 뒤 단순히 한 파일에서 import를 해 사용하지만
      프레임워크는 명령어를 실행한 뒤 내가 작성할 파일이 주어짐.
12 제이쿼리는 반드시 배워야 하는 기술일까?
    - 개인적으로 크롤링 할 때 가독성이 좋아지고 코드가 짧아져서 좋은 것 같음.
13 그놈의 API, 대체 뭐길래?
    - API에 대한 개념은 이해했지만 실제 예시가 있었으면 좋았을 듯.
    - 대충 백엔드 처리를 대신 해주는 코드 서비스라고 이해함
14 도메인은 왜 돈을 주고 사야 할까?
    - .com .kr 등 이 다 같은 곳에서 사용하는 도메인이 아닌 레지스트리에서 운영하는 도메인이라는 것을 알게 됨.
    - 또한 레지스트리에서 도메인을 바로 사는 것이 아닌 리셀러에게 구매해야하다는 것을 알게됨.
15 플래시의 서비스 종료와 스티브 잡스
    - 독점에 대한 위험성을 알게 됨. 발전이 없고, 한 기업에게 주도권이 너무 넘어감.

DAY 5 에피소드 16 ~ 에피소드 21
16 인터넷 익스플로러가 사라진 이유와 브라우저 엔진
    - 플래시는 점유율이 높았지만 엔진 버전을 굉장히 느리게 업데이트해서 다른 브라우저에게 주도권을 내주었다.
      브라우저의 성능은 브러우저가 지원하는 엔진의 성능으로 결정된다.
17 아, 쿠키가 먹는 게 아니라고요?
    - 쿠키는 HTTP 통신을 할 때 항상 연결되어 있지 않다는 특징 때문에 필요하다. 접속정보를 통해 사용자를 구별할 수 있게끔 해준는 역할을 한다.
      쿠키는 도메인당 1개에 한정되고 자동으로 보내고 자동으로 저장한다.
18 프런트엔드, 백엔드?
    - 프런트엔드는 프로그램의 보여지는 부분. UI와 관련된 영역을 말하고,
      백엔드는 프런트엔드에 보여지는 곳의 존재하는 데이터들에 관한 처리를 다루는 영역을 말한다.

    - 프런트엔드의 특징
      기술의 변화속도가 엄청 빠르다.
      자신의 결과물을 바로 확인할 수 있다.

    - 백엔드의 특정
       개발환경이 안정적이다.
       사용할 수 있는 언어의 선택지가 다양하다
       자신의 결과물을 바로 확인하기 제한된다.

19 서버가 뭔지 아직도 모른다고?
    - 서버는 단순히 컴퓨터. 일반적인 컴퓨터와 덜리 보드만 존재해 보드를 여러개 쌓아둔 구조. 모니터를 따로 연결하지 않는다.
      서버는 항상 켜져있고 인터넷에 연결되어 좁속 요청에 응답하는 역할을 수행한다.

20 슈퍼 개발자만 할 수 있다, 풀스택?
    - 데브옵스라는 개발자를 처음 인지하게 됨.
      처음 코딩을 할 때 언어에 따라 다양한 도구를 쓰겠지만 한 예로 vscode를 쓸 때 코드를 입력한다고 바로 코드가 실행되지 않음.
      사용하는 언어에 맞는 인터프린터, 컴파일러 등을 설치하고 vscode 상에서 설치 경로들을 option에 연결하고 extensio을 설치하고 하는 등 여러 설정을 해야함
      이러한 코딩을 여러 설정들 심지어 컴퓨터가 없다면 컴퓨터를 설치하고 기동하는 일들을 한는 사람이 데브옵스 개발자라는 것을 인지함.

    - 18 프론트엔드와 백엔드 그리고 데브옵스를 모두 할 줄 하는 사람이 풀스택 개발자
      풀스택 개발자라고 해서 모든일은 혼자 수행할 필요는 없음.

21 서버리스는 서버가 없다는 뜻?
    - 서버리스는 서버가 없는 것이 아닌 직접 관리하는 서버가 없는 것을 말함.
      AWS와 같은 서비스를 이용하는 것을 말하는 것으로 인지함.

    - 서버리스 특징
      콜드 스타트 : 일반적인 서버보다 응답이 늦을 수 있음. 밀리초 단위로 서비스에 따라 단점이 될 수도 있음.
      서버제공자에게 지나치게 의존. 서비스를 바꾸는 것이 어려움.

DAY 6 에피소드 22 ~ 에피소드 25
22 자료구조와 알고리즘은 필수라고?
    - 알고리즘의 경우 간단한 예시 2개 자료구조의 경우 데이터를 처리하기 위한 용도라는 설명이 있음.
      인터넷을 통해 내가 인지한 알고리즘와 자료구조

    - 알고리즘
      문제해결 방법.

    - 자료구조
      데이터를 상황에 맞게 표율적으로 접근, 수정, 삭제 추가가 가능하게하는 데이터 구조
23 배열이 뭐죠?
    - 인지하고 있었던 내용

24 알고리즘의 속도는 어떻게 표현할까?
    - BiG-O 간단한 것은 이해하겠는데 복잡한 것들은 시작복잡도가 어떻게 되는지 잘 이해가지 않음.
      이것 또한 대충은 인지하고 있었던 내용

25 검색 알고리즘이 뭐죠?
    - 선행 검색과 이진 검색. 인지하고 있었던 내용. 2가지 방법 외에 다른 검색 알고리즘은 딱히 없는 듯

DAY 8 에피소드 26 ~ 에피소드 29
26 정렬 알고리즘이 뭐죠?
    - 버블 정렬, 선택 정렬, 삽입 정렬 를 이해함. 3개의 BIG-O는 같지만 속도가 (버블 정렬 -> 선택 정렬 -> 삽입 정렬)으로 빠름
      평소에 내가 쓰는 정렬 알고리즘이 선택 정렬이라는 것을 알게 됨.
27 스택, 큐가 뭐죠?
    - 규칙 개념의 자료구조 
      스텍 : LIFO (Last In, Fisrt Out)
      큐   : FiFO (Fisrt In, Fisrt Out)
      
28 해시 테이블이 뭐죠?
    - 해시테이블 : 배열에서 index로 value를 찾듯이 key값을 통해 value 값을 찾을 수 있는 자료구조. 이때 key 값은 숫자가 아닌 문자여도 된다.
      해시테이블의 BIG-O는 O(1)이라 생각할 수 있지만 실제 내부에 구현된 해시함수에 따라 O(1)이 아니다.

29 개발자 필수 소양, 클린 코드!
    - 클린 코드
    1. 의미있는 변수와 함수 이름 정하기
    2. 함수 이름은 되도록 동사로
    3. 매개변수는 되도록 적게끔. 2와 연동되는 이유 함수는 하나의 기능만 수행하도록
    4. bool 값은 인자로 되도록 보내지 않기. 2와 연동되는 이유 함수는 하나의 기능만 수행하도록
    5. 되도록 축약어 안 쓰도록

DAY 9 에피소드 30 ~ 에피소드 34
30 코로나가 준 레거시 시스템의 교훈
    - 프로그램은 단순히 한 번 만들고 끝이 아닌 지속적으로 관리되어야 한다.
      예로 예전에 만든 selenium 예시 코드가 동작하지 않은 경우가 있었음.

31 데이터와 단짝 친구, SQL
    - SQL를 데이터베이스를 다루는 언어. 더 정확하게는 DBMS와 대화하는 언어
      SQL의 경우는 배워두면 좋지만 현재까지 필요성을 느끼지 못함. ORM으로 대부분 해결이 가능했기 때문. 
      기본적으로 SQL은 엑셀과 같이 행과 열을 가진 데이터베이스 형식임.
    
32 NoSQL이 뭐죠?
    - NoSQL는 일반적인 SQL과 달리 행과 열의 형태가 아님
    - NoSQL의 종류
      document DB
      json의 형태로 DB를 저장 때문에 SQL처럼 행과 열의 개념으로 모든 데이터가 존재할 필요가 없음.

      key-value DB
      열이 넓은 데이터 베이스

      graph DB
      노드로 관계를 표현하는 데이터베이스

33 깃 & 깃허브, 똑같은 거냐고?
    - git은 버전관리 프로그램. github는 git의 결과물을 저장하고 공유하는 사이트(기관) [기존에 인지하고 있었음]

34 버전을 표기하는 방법도 있어요?
    - 3개의 숫자로 구별됨. (1).(2).(3) 이를 시맨틱 버저닝(semantic versioning specification, SemVer)라고 말함.
      1 프로그램의 큰 변화가 생길 때
      2 프로그램의 업그레이트를 했을 때
      3 패치나 버그가 수정되었을 때

DAY 11 에피소드 35 ~ 에피소드 38
35 비밀번호는 어떻게 저장될까?
36 객체 지향 프로그래밍이 뭐죠? ①
37 객체 지향 프로그래밍이 뭐죠? ②
38 함수형 프로그래밍이 뭐죠?