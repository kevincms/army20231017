# javscript jquery ajax를 이용해서 크롤링을 할 때 정보를 request를 한 뒤 response를 기다리지 않고 다음 코드가 실행되는 경우가 여럿 발견. 그에 대한 원인을 알고자 공부 시작
1. callback
    [ https://www.youtube.com/watch?v=TAyLeIj1hMc ]
    - callback function : 다른 함수의 입력값으로 전달되어 다른 함수에 의해 호출되는 함수. 
      변수로 선언된 함수 자체가 콜백함수인 것이 아니고 그것이 위의 동작을 실행할 때 callback function이 됨.
      한마디로 함수가 바로 실행되지 않고 다른 함수에 의해 실행되는 경우 그 함수를 콜백함수라 함.

2. promise
    [ https://www.youtube.com/watch?v=Sn0ublt7CWM&list=PLuHgQVnccGMBVQ4ZcIRmcOeu8uktUAbxI&index=2 ]
    - javascript는 기본적으로 동기방식(sync)으로 작동한다. 하지만 setTimeout이나 ajax 등 비동기로 작동하는 함수들이 존재한다.
      때문에 크롤링을 할 때 서버로부터 데이터를 받아오지 않더라도 다음동작을 수행해 오류가 나는 경우가 많았던 것이다.
    - Promise 생성
      Promise는 new Promise((reslove,reject)=>{reslove()}) 의 형식으로 생성할 수 있다.
      주로 내가 원하는 작업의 경우 함수 안에 리턴값으로 반환을 하면 될 것 같다.
    - .then 과 .catch 
      2가지 모두 Promise 뒤에 붙여 사용할 수 있다. 또한 .then 과 .catch 의 리턴값 또한 Promise 이기 때문에 계속 붙여 사용가능하다.
      then의 경우 Promise 안의 함수값 인수 reslove가 실행되었을 때 reslove안의 인자가 then안의 함수값 인자로 들어온다. (성공의 경우)
      catch의 경우 reject가 실행되었을때 reject가의 인자가 catch안의 함수값 인자로 들어온다. (실패의 경우)

      나눗셈을 구현한 예시

      function devide(numA, numB) {
      return new Promise((resolve, reject) => {
        if (numB === 0) reject(new Error("Unable to devide by 0."));
        else resolve(numA / numB);
      });
      }

      devide(8, 2)
        .then((result) => console.log("성공:", result))
        .catch((error) => console.log("실패:", error));
      
      특정 서버에서 1초뒤에 값을 받아오고 출력하는 예시
      var test_num

      function test(){
          return new Promise((reslove,reject)=>{
              setTimeout(()=>reslove(2),1000)
          })
      }

      test().then((num)=>{
          test_num=num
          console.log(test_num)
      })
      
3. async & await
    [ https://www.youtube.com/watch?v=1z5bU-CTVsQ&list=PLuHgQVnccGMBVQ4ZcIRmcOeu8uktUAbxI&index=3 ]
    - javascript에서 비동기방식(async)으로 작동하게 하는 방법
      await는 콜백함수의 인자를 반환하기 위한 선언 var test = await test_function()
      await는 async 함수(function) 안에서만 사용이 가능하다. 함수를 선언하고 앞에 async를 붙이면 된다.
      async 함수는 리턴값이 promise이기 때문에 await를 붙인 후 다시 async 함수에 넣어 비동기적으로 처리할 수 있다.

4. Promise All, Race 
    [ https://www.youtube.com/watch?v=a5AzftkvW9U&list=PLuHgQVnccGMBVQ4ZcIRmcOeu8uktUAbxI&index=5 ]
    - Promise.all([list]) list 안의 함수가 모두 끝났을 때 각 함수의 반환값을 list형태의 promise로 반환
    - Promise.race([list]) list 안의 함수가 하나라도 끝났을 때 끝난 함수의 반환값을 promise로 반환

+ 
1. sync & async 개념 + callback hell
    [ https://www.youtube.com/watch?v=s1vpVCrT8f4 ]

2. Promise로 인한 callback hell 해결
    [ https://www.youtube.com/watch?v=JB_yU6Oe2eE ]
    - Promise는 생성되는 즉시 통신을 시도한다.
    - 실제로 코딩해봐야 감이 올 것 같음.